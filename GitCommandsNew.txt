# modifizierte Dateien (getrackte) in den Stage überführen und gleichzeitig commiten
git commit -am "Commit message"

# auflisten aller getrackten Files
git ls-files

# rekursives Adden | mehrere Unterordner mit Dateien
git add .

# Datei aus der Staging Area entfernen
git reset HEAD [NAME_DER_DATEI]

# Datei Inhalt auf letzten Commit setzen
git checkout -- [FILE_NAME]

# Datei löschen
git rm [FILE_NAME]

# Commit History anzeigen
git log 

# bessere anzeige
git log --oneline --graph --decorate --all

# Datei History 
git log -- [Dateiname]

# Adden
git add -A   # stages ALL
git add .    # stages new and modified, without deleted
git add -u   # stages modified and deleted, without new

# Git Config einstellen
git config --global -e

# Git Difftool verwenden
# --- Lokale Vergleiche ---
# Vergleich Working Directory vs Staging Area
git difftool
# Vergleich Working Directory vs Git Repo HEAD
git difftool HEAD
# Vergleich Staging vs Git Repo
git difftool --staged HEAD

# Vergleich zwischen Commits
# Commit ID herausfinden ( git log --oneline )
git difftool ID HEAD oder git difftool HEAD HEAD^ (HEAD und der vorherige)

# --- Lokal vs Remote ---
git difftool master origin/master

# Vergleich zwischen Branches
git difftool [branch1] [branch2]
# Branches 

# Branches anzeigen
git branch -a

# Branch erzeugen
git branch [NAME]
git checkout -b [branchName]

# Branch umbenennen
git branch -m [Branchname] [NeuerBranchName]

# Branch wechseln 
git checkout [BranchName]

# Branch löschen
git branch -d [zulöschenderBranch]

# Branches Mergen (wird immer mit dem aktuellem Branch zusammengeführt (gecheckoutet))
git merge [NameDesZuMergendenBranches]
git merge [NameDesZuMergendenBranches] --no-ff   # Es werden nicht einfach die Commits des Branches angehangen, man kann besser erkennen, was aus dem Branch alles kommt.

# Mergetool
git mergetool # wird benötigt, wenn es Konflikte beim AutoMerge gibt, z.B: Änderungen an einer Datei von zwei Entwicklern

# Rebase ( Den Branch verschieben zu dem letzten Commit des Master Branches )
git rebase master

# Rebase mit Remote 
git fetch origin master => Referenzen updaten

# Den Remote Branch in den lokalen Branch aufnehmen
git pull --rebase origin master

# Stashin
# - quasi eine Art der Speicherung, falls Dateien noch nicht vollständig fertig sind aber man z.B den Branch wechseln möchte, ohne das unfertige zu commiten
git stash # oder git stash save "Save Message"

# auch ungetrackte Dateien stashen
git stash -u

# weiter machen ab dem Stash
git stash apply

# Stash Liste abrufen
git stash list

# letzten Stash löschen
git stash drop

# Stash wieder aufnehmen und löschen
git stash pop

# Bestimmten Stash zeigen
git stash show stash@{NUMMER} # siehe list

# Bestimmten Stash aufrufen
git stash apply stash@{NUMMER} # siehe list

# Bestimmten Stash löschen
git stash drop stash@{NUMMER} # siehe list

# Stash Liste löschen
git stash clear

# Aktuellen Stash im neuen Branch bearbeiten
git stash branch ['BranchName']

# TAGS setzen | Hinweise
# quasi extra Notizen für einen Commit, immer nachdem man commitet hat verwenden!
git tag [TagMessage oder Name]

# Tags anzeigen
git tag --list

# Tag löschen
git tag --delete [NameDesTags]

# Annotated Tag, z.B für Versionsangaben
git tag -a [Name oder Version]